"""USB Reducer Class Definition.

.. _src-reducers-usb_reducer:
    https://github.com/hivebattery/gui/blob/master/driver/src/reducer/usb_reducer.py

"""
from __future__ import absolute_import
import datetime

from react.redux.reducer import Reducer

from src.actions.actions import ACTION_TYPES, sSIGN
from src.common.log.console_message import print_status, ERR_USB_OTHER
from src.config.config import LOG, DEV

DEFAULT_STATE = dict(data=None, usb_handle=None, message=None, current_range=None, status=None, is_connected=False,
                     error=None, args=None)
"""dict: The reducers initial state.
"""


class USBReducer(Reducer):
    """USBReducer

    Defines a way to reduce the data returned by the USB actions to pass down as props to the connected components.

    """
    def __init__(self):
        super(USBReducer, self).__init__(DEFAULT_STATE)

    def reduce_action(self, action):
        """Reduces the data generated by the USB actions into props for components.

        According to the aciton type, deduce the kind of results to be expected and process them into props.

        Args:
            action (react.data_structures.named_tuple.NamedTuple): The results returned by the USB actions.

        Returns:
            react.data_structures.named_tuple.NamedTuple: The new state of the reducer to pass down as props.

        """
        err = None
        t = action.type
        current_state = {}
        update = None if LOG < 1 else "%s ACTION " % t

        if t == ACTION_TYPES.POLL_EIS and action.data is not None:
            if LOG > 0:
                update += "0x%02X" % action.data

        if action.error is not None:
            current_state['status'] = None

            if t == ACTION_TYPES.CHECK_CONNECTION or t == ACTION_TYPES.CONNECT or \
                (t == ACTION_TYPES.POLL_EIS and action.error == ERR_USB_OTHER):
                if t == ACTION_TYPES.CONNECT or t == ACTION_TYPES.POLL_EIS:
                    err = action.error

                current_state['is_connected'] = False
                current_state['usb_handle'] = None
            else:
                err = action.error
        else:
            if t == ACTION_TYPES.CONNECT:
                current_state['is_connected'] = True
                current_state['usb_handle'] = action.data
            elif t == ACTION_TYPES.START_EIS:
                current_state['message'] = action.data
                current_state['data'] = None
            elif t == ACTION_TYPES.POLL_EIS:
                current_state['message'] = None
                current_state['status'] = action.data

                if current_state['status'] == sSIGN:
                    current_state['current_range'] = action.args

            elif t == ACTION_TYPES.CLEAR_USB_ERRORS:
                pass
            elif t == ACTION_TYPES.START_EIS_DATA_TRANSFER:
                data_set = (datetime.datetime.now(), action.data)

                if self.state.data is None:
                    current_state['data'] = [data_set]
                else:
                    x = self.state.data[:]
                    x.append(data_set)
                    current_state['data'] = x
            elif t == ACTION_TYPES.UPDATE_USB_STATUS:
                current_state['status'] = action.data
            else:
                pass

        current_state['error'] = err, action.args

        if DEV and t != -1:
            current_state['is_connected'] = True
            current_state['usb_handle'] = "n"
            current_state['error'] = None, None

        self.state = self.state._replace(**current_state)

        if update is not None:
            print_status(update)

        return self.state
