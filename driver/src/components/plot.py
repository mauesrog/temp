"""Plot Component class definition.

Todo:
    * Implement displaying point data when hovering over it.

.. _src-components-plot:
    https://github.com/hivebattery/gui/blob/master/driver/src/components/plot.py

"""
from __future__ import absolute_import

from matplotlib import pyplot as plt
import numpy as np
import json

from react.index import FigureCanvas, get_root, set_close_window_handler
from react.component import Component

from src.methods import fourier
from src.config.config import *


class Plot(Component):
    """Plot Component.

    The React Component that contains the GUI's Nyquist Plot. The Component provides extra functionality to allow
    for testing by including a `temp` folder with a `raw_data.json` file that takes precedence over the data returned
    by the device. The file `src/temp/raw_data.json` must follow the following format:

        {
            "data": [
                [...],
                [...],
                ...,
                [...]
            ],
        }.

    If this file does not exists, then an exception is raised to indicate that the normal execution of EIS will be done
    instead.

    Attributes:
        __drew_axes (bool): Whether the axes should be displayed.
        voltage (list of float): The voltage data for all frequencies.
        current (list of float): The current data for all frequencies.
        fig (matplotlib.Figure): The matplotlib figure object.
        a (matplotlib.Axes): The matplotlib axes object.
        plot (react.widget_wrappers.FigureCanvas): The canvas that contains all the plot data.

    """
    def __init__(self, parent, frame=None, **props):
        """Plot Component constructor.

        Args:
            parent (react.component.Component): The component that should contain the plot.
            frame (react.widget_wrappers.Frame, optional): The Frame where the plot should be placed. If no
                frame is specified, then the default frame is considered instead.
            **props: The props passed down to the Plot component.

        Raises:
            IOError: Input/output errors when trying to read the `src/temp/raw_data.json` file.
            OSError: Errors related to the computer's operating system.

        """
        super(Plot, self).__init__(parent, frame, **props)

        self.state = dict(impedance_data=[], coords=None)

        self.__draw_axes = False

        self.voltages = None
        self.currents = None

        try:
            f = open('./temp/raw_data.json', 'rb')

            self.voltages = []
            self.currents = []

            self.real_data = json.load(f)['data']

            for j in range(1, len(self.real_data[0])):
                if j % 2 != 0:
                    self.voltages.append([])
                    curr_freq = self.voltages[-1]
                else:
                    self.currents.append([])
                    curr_freq = self.currents[-1]

                for i in range(len(self.real_data)):
                    curr_freq.append(self.real_data[i][j])
        except (OSError, IOError) as e:
            print e

        self.fig, self.a = plt.subplots()

        self.fig.set_size_inches(5, 5)
        self.fig.set_facecolor(BG_COLOR)

        self.a.invert_yaxis()
        self.a.set_picker(True)
        self.prepare_axes()

        self.plot = FigureCanvas(self, self.fig, frame=self.parent_frame, width=self.width, height=self.height - 100,
                                 bg=BG_COLOR, highlightcolor=BG_COLOR, highlightbackground=BG_COLOR)

        set_close_window_handler(self.quit)

    def component_will_receive_props(self, props):
        """Overrides Component's `component_will_receive_props`.

        Plot the impedance data according to the current frequency's voltage and current data. This method behaves
        according to whether `src/temp/raw_data.json` exists. If it exists, then we use the sample data corresponding
        to that frequency's id. Otherwise, use the actual data generated by EIS and passed down as a prop to this
        component.

        Args:
            props: The new props that haven't been updated on this component.

        See Also:
            React module :py:mod:`component`.

        """
        if hasattr(props, 'data'):
            data = props.data

            if data is None:
                self.a.clear()
                self.__draw_axes = False
            elif len(data) > 0:
                if not self.drew_axes:
                    self.prepare_axes()

                freq_id = len(props.data) - 1

                curr_data = props.data[-1][1] if self.voltages is None \
                    else self.voltages[freq_id] + self.currents[freq_id]

                freq_bit = int(np.round(np.log2(float(self.props.freqs_explicit()[freq_id]) / F_MIN))) & 23
                freq_explicit = 2 ** (27 - freq_bit) if freq_bit >= 21 else 128

                impedance = fourier.get_impedance(curr_data, freq_explicit)

                if len(props.data) == 1:
                    impedance_data = [impedance]
                else:
                    impedance_data = self.state.impedance_data + [impedance]

                impedance_real = [z.real for z in impedance_data]
                impedance_imag = [z.imag for z in impedance_data]

                self.a.plot(impedance_real, impedance_imag, '-go')
                self.plot.plot_show()

                self.set_state(dict(impedance_data=impedance_data))

    def prepare_axes(self):
        """Configure axes with their corresponding labels, ticks, and grid lines.

        Once the setup is done, `self.__draw_axes` is set to `True` to indicate that the axes have been drawn anew.

        """
        self.a.set_xlabel('Re(Z) (%s)' % u'\u03A9', fontsize=10, color=TEXT_COLOR)
        self.a.set_ylabel('Im(Z) (%s)' % u'\u03A9', fontsize=10, color=TEXT_COLOR)

        for tick in self.a.xaxis.get_major_ticks() + self.a.yaxis.get_major_ticks():
            tick.label.set_fontsize(10)
            tick.label.set_color(TEXT_COLOR)

        self.a.grid(which='both')
        self.a.set_axis_bgcolor(FG_COLOR)

        self.a.minorticks_on()

        gridlines = self.a.get_xgridlines() + self.a.get_ygridlines()

        for line in gridlines:
            line.set_linestyle('-')

        self.__draw_axes = True

    @staticmethod
    def quit():
        """Close the window and destroy Tkinter's `Root`.

        """
        get_root().quit()

    def render(self):
        """Plot Component Render method..

        """
        self.plot.place(y=100, width=self.width, height=self.height - 100)
